(* debaysement.com Wookie-2.2 shop-debaysement.myshopify.com *)

(* In passoword protection Section *)

{{ 'pi-collection-password.css' | asset_url | stylesheet_tag }}

<style>
  [pi-hidden] {
    height: 1px !important;
    overflow: hidden !important;
    opacity: 0 !important;
  }
</style>

{% if section.settings.collection_password != blank %}

  <form pi-hidden class="pi-js-password-form-wrapper" id="myPasswordForm">
            <div class="pi-js-password-form">

                <input type="password" name="password" class="pi-js-password-field">
                <button type="button" class="pi-js-password-button">{{ section.settings.password_button_text }}</button>
            </div>
              <div pi-hidden class="pi-js-wrong-password">
                Incorrect password, please try again.
              </div>
</form>
{% endif %}

<div class="pi-js-password-protected-wrapper"
  {% if section.settings.collection_password != blank %}
    pi-hidden
    data-password-section-id="{{ collection.id }}"
    data-section-password="{{ section.settings.collection_password }}"
  {% endif %}
  >
  
{% include 'collection-template' current_pagination_limit: settings.pagination_limit %}

</div>

{% if section.settings.collection_password != blank %}
  <script>
  
  // Function to set a cookie
  function setCookie(cookieName, cookieValue, expirationDays) {
    let currentDate = new Date();
    currentDate.setTime(currentDate.getTime() + (expirationDays * 24 * 60 * 60 * 1000));
    let expirationDate = "expires=" + currentDate.toUTCString();
    document.cookie = cookieName + "=" + cookieValue + ";" + expirationDate + ";path=/";
  }
  
  // Function to get a cookie
  function getCookie(cookieName) {
    let name = cookieName + "=";
    let decodedCookie = decodeURIComponent(document.cookie).split(';');
    for (let i = 0; i < decodedCookie.length; i++) {
      let c = decodedCookie[i].trim();
      if (c.indexOf(name) == 0) return c.substring(name.length, c.length);
    }
    return "";
  }
  
  document.addEventListener('DOMContentLoaded', (event) => {
      const PasswordFormWrapper = document.querySelector('.pi-js-password-form-wrapper');
      const passwordAlert = document.querySelector('.pi-js-wrong-password');
      const PasswordProtectedWrapper = document.querySelector('.pi-js-password-protected-wrapper');
      const passwordSectionId = PasswordProtectedWrapper.dataset.passwordSectionId; // Assuming a unique ID is assigned
      const sectionPassword = PasswordProtectedWrapper.dataset.sectionPassword; // Assuming a password is set
      const piPasswordSubmitButtons = Array.from(document.querySelectorAll('.pi-js-password-button'));
      // const sectionPasswordModal = document.querySelector('.collection-password-modal'); // Assuming there's only one modal per page
  
      const cookiesLifeDays = 1; // Cookie lifespan in days
  
      // Function to reveal content for the collection
      function revealContent() {
          PasswordProtectedWrapper.removeAttribute("pi-hidden");
          // sectionPasswordModal.classList.remove("modal--is-active");
          console.log(PasswordFormWrapper);
          PasswordFormWrapper.setAttribute("pi-hidden","");
      }
  
      // Check if the correct cookie is already set, if so, reveal content immediately
      if (getCookie("collection_password_" + passwordSectionId) === sectionPassword) {
          revealContent();
      } else {
        PasswordFormWrapper.removeAttribute("pi-hidden");
      }
    
const myPasswordForm = document.querySelector('#myPasswordForm');

myPasswordForm.addEventListener('submit', function(event) {
  console.log("form-submit");
  event.preventDefault(); // Prevent form submission
  // Function to handle password submission
  const passwordField = myPasswordForm.querySelector('.passwordField');
  
  handleSubmit();
  function handleSubmit() {
    console.log("handleSubmit");

    if (passwordField.value === collectionPassword) {
      if (getCookie("collection_password_" + collectionId) !== collectionPassword) {
        setCookie("collection_password_" + collectionId, collectionPassword, cookiesLifeDays);
      }
      revealContent();
    } else {
      passwordAlert.removeAttribute("pi-hidden");
    }
  }
});

      piPasswordSubmitButtons.forEach((button) => {
          const form = button.closest('.password-form');
          const passwordField = form.querySelector('.passwordField');
          button.addEventListener('click', function(event) {
              event.preventDefault(); // Prevent form submission
              if (passwordField.value === sectionPassword) {
                  if (getCookie("collection_password_" + passwordSectionId) !== sectionPassword) {
                      setCookie("collection_password_" + passwordSectionId, sectionPassword, cookiesLifeDays);
                  }
                  revealContent();
  
              } else {
                  // alert('Incorrect password, please try again.');
                  passwordAlert.removeAttribute("pi-hidden");
              }
          });
      });
  });
  
  </script>
  
{% endif %}




{% schema %}
  {
    "name": "Collection Template",
    "tag": "section",
    "settings": [
      {
        "type": "text",
        "label": "Collection Password",
        "id": "collection_password"
      }
    ]
  }
{% endschema %}

